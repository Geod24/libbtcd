/*******************************************************************************

    Set of data used for testing, such as the genesis block and various hashes

    All data is little endian

*******************************************************************************/

module libbtc.TestData;

version (unittest):

/// Hash of the Genesis block, in binary
static immutable ubyte[32] GenesisBlockHash = [
    0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, 0xc1, 0xa6, 0xa2, 0x46,
    0xae, 0x63, 0xf7, 0x4f, 0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,
    0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00
];

/// Genesis block hash, as lower-case string
static immutable GenesisBlockHashStr =
    "0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f";

/// Genesis block as binary data
static immutable ubyte[] GenesisBlock = GenesisBlockHeader ~ GenesisBlockTransactions;

/// Genesis block header
static immutable ubyte[] GenesisBlockHeader = [
    // Version
    0x01, 0x00, 0x00, 0x00,
    // Prev
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Merkle root
    0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e,
    0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,
    0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,
    // Timestamp
    0x29, 0xab, 0x5f, 0x49,
    // Bits (difficulty)
    0xff, 0xff, 0x00, 0x1d,
    // Nounce
    0x1d, 0xac, 0x2b, 0x7c
];

/// Genesis block's single transaction
static immutable ubyte[] GenesisBlockTransactions = [
    // Number of transactions
    0x01,
    // Version number
    0x01, 0x00, 0x00, 0x00,
    // Number of inputs
    0x01,
    // PrevOut hash
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // PrevOut idx
    0xff, 0xff, 0xff, 0xff,
    // Length of transaction (77)
    0x4d,
    // Signature
    0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x45, 0x54, 0x68, 0x65, 0x20,
    0x54, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x30, 0x33, 0x2f, 0x4a, 0x61, 0x6e,
    0x2f, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65,
    0x6c, 0x6c, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x6e,
    0x6b, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20,
    0x62, 0x61, 0x69, 0x6c, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x62, 0x61, 0x6e, 0x6b, 0x73,
    // Sequence (usually 0xFFFF_FFFF)
    0xff, 0xff, 0xff, 0xff,
    // Number of TxOut
    0x01,
    // Value (50 BTC)
    0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00,
    // Script length
    0x43,
    // Script
    0x41, 0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67,
    0xf1, 0xa6, 0x71, 0x30, 0xb7, 0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39,
    0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde, 0xb6, 0x49, 0xf6,
    0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1,
    0x12, 0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c,
    0x70, 0x2b, 0x6b, 0xf1, 0x1d, 0x5f, 0xac,
    // Lock time
    0x00, 0x00, 0x00, 0x00
];
